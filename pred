def predict(predict_sentence):

    data = [predict_sentence, '0']
    dataset_another = [data]

    another_test = BERTDataset(dataset_another, 0, 1, tok, max_len, True, False)
    test_dataloader = torch.utils.data.DataLoader(another_test, batch_size=batch_size, num_workers=5)
    
    model.eval()

    for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(test_dataloader):
        token_ids = token_ids.long().to(device)
        segment_ids = segment_ids.long().to(device)

        valid_length= valid_length
        label = label.long().to(device)

        out = model(token_ids, valid_length, segment_ids)


        test_eval=[]
        for i in out:
            logits=i
            logits = logits.detach().cpu().numpy()

            if np.argmax(logits) == 0:
                test_eval.append("직원")
            elif np.argmax(logits) == 1:
                test_eval.append("시술")
            elif np.argmax(logits) == 2:
                test_eval.append("대기")
            elif np.argmax(logits) == 3:
                test_eval.append("시설")
            elif np.argmax(logits) == 4:
                test_eval.append("기타")
            elif np.argmax(logits) == 5:
                test_eval.append("수술")
            elif np.argmax(logits) == 6:
                test_eval.append("시스템")

        print(">> 입력하신 내용은 " + test_eval[0] + " 관련입니다.")
